name: Build and publish
description: Builds and publishes the composite action

inputs:
  dotnet-version:
    description: The version of .NET to use
    required: true
  dotnet-quality:
    description: The quality of .NET to use
    required: true
    default: stable
  solution-path:
    description: The path to the solution to build
    required: true
    default: ParusRX.sln
  projects-path:
    description: The path to the projects to build
    required: true
  tests-path:
    description: The path to the tests to run
    required: true
  registry:
    description: The registry to publish to e.g. docker.io
    required: true
    default: docker.io
  registry-username:
    description: The username for the registry
    required: true
  registry-password:
    description: The password for the registry
    required: true
  publish-path:
    description: The path to the projects to publish
    required: true

runs:
  using: composite
  steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
        dotnet-quality: ${{ inputs.dotnet-quality }}
    - name: Build and run tests
      shell: bash
      run: |
        dotnet restore ${{ inputs.solution-path }}
        cd ${{ inputs.projects-path }}
        for project in $(find . -name '*.csproj' -type f); do
          dotnet build $project --no-restore
        done
        cd -
        cd ${{ inputs.tests-path }}
        for project in $(find . -name '*Tests.csproj' -type f); do
          dotnet build $project --no-restore
          dotnet test $project --no-build --no-restore --verbosity normal
        done
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}
    - name: Publish
      shell: bash
      run: |
        dotnet publish ${{ inputs.publish-path }} -r linux-x64 -p PublishProfile=DefaultContainer -p ContainerRegistry=${{ inputs.registry }} -p ContainerImageTag=latest